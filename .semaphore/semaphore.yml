# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: GogglesDb Engine

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

global_job_config:
  prologue:
    commands:
      # Checkout code from Git repository. This step is mandatory if the
      # job is to work with your code.
      # Optionally you may use --use-cache flag to avoid roundtrip to
      # remote repository.
      # See https://docs.semaphoreci.com/article/54-toolbox-reference#checkout
      - checkout
      # Restore dependencies from cache.
      # Read about caching: https://docs.semaphoreci.com/article/149-caching
      - cache restore
      # Set Ruby version:
      - sem-version ruby 2.6.3
      - bundle install --deployment --jobs 4 --path vendor/bundle

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: Setup
    dependencies: []
    task:
      jobs:
        - name: bundle
          commands:
          # Store the latest version of dependencies in cache,
          # to be used in next blocks and future workflows:
          - cache store

  - name: Code scanning
    dependencies:
      - Setup
    task:
      jobs:
        - name: check style + security
          commands:
            - bundle exec rubocop
            - bundle exec brakeman

  - name: Unit tests
    dependencies:
      - Code scanning
    task:
      # This block runs two jobs in parallel and they both share common
      # setup steps. We can group them in a prologue.
      # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
      prologue:
        commands:
          - sem-service start mysql
          # Password-less access for CI:
          - cp spec/dummy/config/database.semaphore_ci.yml spec/dummy/config/database.yml
          - bundle exec rake db:setup
          - 'curl -L -o seed.sql.bz2 "https://github.com/steveoro/goggles_admin/raw/master/db/dump/development.sql.bz2"'
          - bunzip2 -ck seed.sql.bz2 > seed.sql
          # - mysql --user=root --password=semaphoredb --execute="drop database if exists goggles_test;"
          # - mysql --user=root --password=semaphoredb --execute="create database goggles_test;"
          # - mysql --user=root --password=semaphoredb --database=goggles_test --execute="\. seed.sql"
          - mysql --database=goggles_test --execute="\. seed.sql"
          - rm seed.sql

      jobs:
      - name: RSpec - models
        commands:
          - bundle exec rspec -t type:model

      - name: RSpec - strategies
        commands:
          - bundle exec rspec -t type:strategy

      - name: RSpec - validators
        commands:
          - bundle exec rspec -t type:validator

  # Note that it's possible to define an agent on a per-block level.
  # For example, if your integration tests need more RAM, you could override
  # agent configuration here to use e1-standard-8.
  # See https://docs.semaphoreci.com/article/50-pipeline-yaml#agent-in-task
  # - name: Integration tests
  #   dependencies:
  #     - Unit tests
  #   task:
  #     jobs:
  #     - name: RSpec - feature specs
  #       commands:
  #           - sem-service start mysql
  #           - bundle exec rake db:setup
  #           - bundle exec rspec spec/features
